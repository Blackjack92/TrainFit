<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:TrainFit.Styling"
    xmlns:controls="using:TrainFit.Controls">

    <!-- Default colors -->
    <Color x:Key="BaseColor.Yellow">#FCEE21</Color>
    <Color x:Key="BaseColor.DarkGray">#333333</Color>
    <Color x:Key="BaseColor.LightGray">#CCCCCC</Color>
    <Color x:Key="BaseColor.Gray">#BEBEBE</Color>
    <Color x:Key="BaseColor.White">#FFFFFF</Color>
    <Color x:Key="BaseColor.Black">#000000</Color>
    
    <!-- Default color brushes -->
    <SolidColorBrush x:Key="BaseTheme.Yellow" Color="{StaticResource BaseColor.Yellow}" />
    <SolidColorBrush x:Key="BaseTheme.DarkGray" Color="{StaticResource BaseColor.DarkGray}" />
    <SolidColorBrush x:Key="BaseTheme.LightGray" Color="{StaticResource BaseColor.LightGray}" />
    <SolidColorBrush x:Key="BaseTheme.Gray" Color="{StaticResource BaseColor.Gray}" />
    <SolidColorBrush x:Key="BaseTheme.White" Color="{StaticResource BaseColor.White}" />
    
    <!-- Default styles -->
    <Style x:Key="TextBlock.Base" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource BaseColor.DarkGray}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="FontWeight" Value="Thin" />
    </Style>

    <Style x:Key="Button.Base" TargetType="Button">
        <Setter Property="Foreground" Value="{StaticResource BaseColor.Black}" />
        <Setter Property="BorderBrush" Value="{StaticResource BaseColor.DarkGray}" />
        <Setter Property="Background" Value="{StaticResource BaseColor.LightGray}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HamburgerToggleButton.Base" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Margin="10,0" Background="{TemplateBinding Background}">
                        <Canvas HorizontalAlignment="Left" Width="30" Height="42">
                            <Path Data="F1M0,2L30,2 30,0 0,0z" Fill="{TemplateBinding Foreground}" Height="2" Stretch="None" Canvas.Top="10" Width="30" />
                            <Path Data="F1M0,2L30,2 30,0 0,0z" Fill="{TemplateBinding Foreground}" Height="2" Stretch="None" Canvas.Top="20" Width="30" />
                            <Path Data="F1M0,2L30,2 30,0 0,0z" Fill="{TemplateBinding Foreground}" Height="2" Stretch="None" Canvas.Top="30" Width="30" />
                        </Canvas>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="HamburgerMenu.Base" TargetType="controls:HamburgerMenu">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:HamburgerMenu">
                    <Grid Background="{TemplateBinding Background}" Width="{TemplateBinding Width}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <VisualState x:Name="OpenLeftPane">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="leftPanePresenter" EnableDependentAnimation="True" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" To="0" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="mainPaneRectangle">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="mainPaneRectangle" EnableDependentAnimation="True" Storyboard.TargetProperty="Opacity" To="0.7" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CloseLeftPane">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="leftPanePresenter" EnableDependentAnimation="True" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" To="{TemplateBinding LeftPaneWidth}" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!-- Main body container -->
                        <ContentPresenter Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" />
                        <!-- Element to obscure main body when left pane is open -->
                        <Rectangle Grid.Column="0" Grid.ColumnSpan="2" x:Name="mainPaneRectangle" Visibility="Collapsed" Opacity="0" Fill="{ThemeResource ApplicationPageBackgroundThemeBrush}" />
                        <!-- Left pane container -->
                        <ContentPresenter Grid.Column="0" x:Name="leftPanePresenter" Content="{TemplateBinding LeftPane}" Width="{TemplateBinding LeftPaneWidth}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Explizit styles -->
    <Style x:Key="HamburgerToggleButton.Menubar" TargetType="ToggleButton" BasedOn="{StaticResource HamburgerToggleButton.Base}">
        <Setter Property="Foreground" Value="{StaticResource BaseColor.Yellow}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    
    <!-- Set default styles -->
    <Style TargetType="TextBlock" BasedOn="{StaticResource TextBlock.Base}" />
    <Style TargetType="Button" BasedOn="{StaticResource Button.Base}" />
    <Style TargetType="controls:HamburgerMenu" BasedOn="{StaticResource HamburgerMenu.Base}" />
</ResourceDictionary>
